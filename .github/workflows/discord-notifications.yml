name: Discord Issue Notification (Opened/Closed/Reopened)

on:
  issues:
    types: [opened, reopened, closed] # D√©clench√© uniquement par ces √©v√©nements principaux

jobs:
  # Job qui envoie une seule notification par issue ouverte, rouverte ou ferm√©e
  notify_single:
    runs-on: ubuntu-latest
    steps:
      # √âtape 1: D√©terminer le type d'action et les textes/ic√¥nes associ√©s
      - name: Determine action type
        id: set-action
        run: |
          if [ "${{ github.event.action }}" == "opened" ] || [ "${{ github.event.action }}" == "reopened" ]; then
            echo "action=opened_reopened" >> $GITHUB_OUTPUT # Grouper opened/reopened
            echo "action_verb=Ouverte/R√©ouverte" >> $GITHUB_OUTPUT
            echo "action_icon=üÜï" >> $GITHUB_OUTPUT
            echo "notification_title_prefix=Nouvelle Issue" >> $GITHUB_OUTPUT
            echo "footer_action_suffix=Ouverte/R√©ouverte" >> $GITHUB_OUTPUT
          elif [ "${{ github.event.action }}" == "closed" ]; then
            echo "action=closed" >> $GITHUB_OUTPUT
            echo "action_verb=Ferm√©e" >> $GITHUB_OUTPUT
            echo "action_icon=üîí" >> $GITHUB_OUTPUT
            echo "notification_title_prefix=Issue Ferm√©e" >> $GITHUB_OUTPUT
            echo "footer_action_suffix=Ferm√©e" >> $GITHUB_OUTPUT
          fi

      # √âtape 2: D√©terminer le label de priorit√© et les param√®tres associ√©s
      # Ceci est bas√© sur les labels pr√©sents sur l'issue au moment de l'√©v√©nement (opened, reopened, or closed)
      - name: Determine priority label
        id: priority-label
        run: |
          # Liste des labels par ordre de priorit√© (du plus important au moins important)
          # Le premier label trouv√© d√©finit le canal et les param√®tres du message.
          # Si aucun de ces labels sp√©cifiques n'est pr√©sent, le cas 'default' est utilis√©.
          if [[ "${{ contains(github.event.issue.labels.*.name, 'bug') }}" == "true" ]]; then
            echo "label=bug" >> $GITHUB_OUTPUT
            echo "webhook_secret=DISCORD_WEBHOOK_BUG" >> $GITHUB_OUTPUT
            echo "severity=error" >> $GITHUB_OUTPUT
            echo "color=#e74c3c" >> $GITHUB_OUTPUT
            echo "emoji=üêõ" >> $GITHUB_OUTPUT
            echo "category_text=Bug Report" >> $GITHUB_OUTPUT
          elif [[ "${{ contains(github.event.issue.labels.*.name, 'help wanted') }}" == "true" ]]; then
            echo "label=help wanted" >> $GITHUB_OUTPUT
            echo "webhook_secret=DISCORD_WEBHOOK_HELP_WANTED" >> $GITHUB_OUTPUT
            echo "severity=warning" >> $GITHUB_OUTPUT
            echo "color=#f1c40f" >> $GITHUB_OUTPUT
            echo "emoji=ü§ù" >> $GITHUB_OUTPUT
            echo "category_text=Help Wanted" >> $GITHUB_OUTPUT
          elif [[ "${{ contains(github.event.issue.labels.*.name, 'enhancement') }}" == "true" ]]; then
            echo "label=enhancement" >> $GITHUB_OUTPUT
            echo "webhook_secret=DISCORD_WEBHOOK_ENHANCEMENT" >> $GITHUB_OUTPUT
            echo "severity=info" >> $GITHUB_OUTPUT
            echo "color=#a1d995" >> $GITHUB_OUTPUT
            echo "emoji=‚ú®" >> $GITHUB_OUTPUT
            echo "category_text=Enhancement" >> $GITHUB_OUTPUT
          elif [[ "${{ contains(github.event.issue.labels.*.name, 'documentation') }}" == "true" ]]; then
            echo "label=documentation" >> $GITHUB_OUTPUT
            echo "webhook_secret=DISCORD_WEBHOOK_DOCUMENTATION" >> $GITHUB_OUTPUT
            echo "severity=info" >> $GITHUB_OUTPUT
            echo "color=#3498db" >> $GITHUB_OUTPUT
            echo "emoji=üìö" >> $GITHUB_OUTPUT
            echo "category_text=Documentation" >> $GITHUB_OUTPUT
          elif [[ "${{ contains(github.event.issue.labels.*.name, 'question') }}" == "true" ]]; then
            echo "label=question" >> $GITHUB_OUTPUT
            echo "webhook_secret=DISCORD_WEBHOOK_QUESTION" >> $GITHUB_OUTPUT
            echo "severity=info" >> $GITHUB_OUTPUT
            echo "color=#cc317c" >> $GITHUB_OUTPUT
            echo "emoji=‚ùì" >> $GITHUB_OUTPUT
            echo "category_text=Question" >> $GITHUB_OUTPUT
          elif [[ "${{ contains(github.event.issue.labels.*.name, 'invalid') }}" == "true" ]]; then
            echo "label=invalid" >> $GITHUB_OUTPUT
            echo "webhook_secret=DISCORD_WEBHOOK_INVALID" >> $GITHUB_OUTPUT
            echo "severity=info" >> $GITHUB_OUTPUT
            echo "color=#b60205" >> $GITHUB_OUTPUT
            echo "emoji=üö´" >> $GITHUB_OUTPUT
            echo "category_text=Invalid Issue" >> $GITHUB_OUTPUT
          else
            # Cas par d√©faut si aucun label sp√©cifique n'est trouv√© au moment de l'√©v√©nement
            echo "label=default" >> $GITHUB_OUTPUT
            echo "webhook_secret=DISCORD_WEBHOOK_DEFAULT" >> $GITHUB_OUTPUT
            echo "severity=info" >> $GITHUB_OUTPUT
            echo "color=#95a5a6" >> $GITHUB_OUTPUT
            echo "emoji=üìã" >> $GITHUB_OUTPUT
            echo "category_text=G√©n√©ral" >> $GITHUB_OUTPUT
          fi

      # √âtape 3: Envoyer la notification Discord
      # Cette √©tape s'ex√©cute pour tous les √©v√©nements d√©clench√©s (opened, reopened, closed)
      - name: Send notification to Discord
        uses: rjstone/discord-webhook-notify@v1 # !!! Version 1 utilis√©e comme demand√© !!!
        with:
          # Utilise le secret de webhook d√©termin√© dynamiquement par l'√©tape priority-label
          webhookUrl: ${{ secrets[steps.priority-label.outputs.webhook_secret] }}
          severity: ${{ steps.priority-label.outputs.severity }}
          # Le nom d'utilisateur Discord inclut la cat√©gorie d√©termin√©e
          username: GitHub - ${{ steps.priority-label.outputs.category_text }}
          color: ${{ steps.priority-label.outputs.color }}
          avatarUrl: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png
          description: |
            ${{ steps.priority-label.outputs.emoji }} **${{ steps.set-action.outputs.notification_title_prefix }}** ${{ steps.set-action.outputs.action_icon }}
            **Issue #${{ github.event.issue.number }}**: ${{ github.event.issue.title }}
            üîó [Voir l'issue](${{ github.event.issue.html_url }})

            ---
            ${{ github.event.issue.body || 'Aucune description fournie.' }}
          details: |
            ${{ steps.set-action.outputs.action == 'opened_reopened' && format('Cr√©√©e par {0}', github.event.issue.user.login) ||
                 steps.set-action.outputs.action == 'closed' && format('Ferm√©e par {0} ({1})', github.event.sender.login, github.event.issue.state_reason || 'Raison non sp√©cifi√©e') }}
            ${{ steps.priority-label.outputs.label != 'default' && format('Labels: {0}', join(github.event.issue.labels.*.name, ', ')) || '' }}
          footer: GitHub Notification (${{ steps.set-action.outputs.footer_action_suffix }}) # Le footer indique l'action
          text: Issue #${{ github.event.issue.number }} - ${{ steps.set-action.outputs.action_verb }}
